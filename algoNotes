POJO - plain old java object
DAO - data access object - manages the association between POJO's and the database
Service Layer - 'business logic' handled by java
Model - POJO's corresponding to database data
Util - Usually a place for
    singletons - Classes managing single objects
    factories - Classes managing the generation of new objects
Controller - Web communication handler
Views - refer to front-end visualizations of our application (for now we can say that our console is
    kind of a 'view'

Algorithms
What's an algorithm?
A process for doing things (usually math)
Big O Notation is for worst case:

O(1)*
--O(log(log(n)))
O(log(n))*
--O(log(n^2))
O(nlog(n))*
O(n)*
O(n^2)*
--O(n^3)
O(2^n)*
O(n!)*


O(n/2)
O(.00001*n^2)
O(n/2) will outperform O(.00001*n^2) given a large enough N: Complexity is all about scaling to larger amounts of data

O(n-100000000) converges to O(n)

                Insertion at end   Insertion at beginning   Insertion   binary search  Sort                                     linear search   Retrieval
BST (assuming balanced n/a                 n/a               O(log(n))  O(log(n))        n/a                                    n/a             n/a
ArrayList           O(1)*                   O(n)             n/a        O(log(n))        best case nlog(n), selection is n^2    O(n)            n/a
LinkedList          O(n)                    O(1)             n/a        n/a              x                                      O(n)            n/a
Hash                n/a                     n/a              O(1)*      n/a              n/a                                    n/a             O(1)

Selection sort:
We maintain a minimum search index, starting at 0
for each item in the array array:{
    using a for loop traversal:{
        we find the minimum value *after* the minimum index
        after traversal, we swap the minimum with what is contained in the minimum index
        we increment the minimum index
    }
}
what does this lead to?
the section of the array that is sorted 'grows' from the beginning of the array, because we are finding
the value that belongs in a particular spot, starting at 0
O(n^2)

Algorithm considerations:
searching:
is it sorted?
    if yes, binary
    if no, linear traversal
sorting:
    some algorithms are better at partially sorted arrays
        selection, insertion
    some algorithms do or do not require additional memory to be allocated
        yes: quick, bubble, selection, insertion
        no: merge
    algorithm stability: does an algo preserve original order of equal elements?
        yes: bubble, insertion, merge, count
        no: radix, quick, heap, selection

    partially sorted:
    {1, 2, 3, 4, 6, 5}
    (eg a leaderboard has shifted slightly from a single game out of many
    unsorted:
    {6, 3, 2, 5, 1, 4}
    (eg we are given an alphabetical list of player names and need to sort hit percentage)

sql review:

brand
item
store
purchase
customer

a customer can own many items
many stores can carry many brands
create a new table to serve as an intermediary that keeps track of what stores and carrying what?
let's say we have a 'carrying' table

fkey to brand
fkey to store

let's say an item has a column for prices
a sql query to return all items below a certain price?

aggregate functions
select avg(price) from item

scalar functions?

let's say within item I have a brand id but no brand name-
within the brand table i have brand id and brand name-
how do i find the brand name of a particular item

select * from brand join item on brand.brand_id = item.item_id;


let's say I want to to combine two resultsets:
one for the items with brand id 1,
and one for the items with brand id 3

select * from items where brand_id=1
union
select * from items where brand_id=3;





store table:
pkey: store id
name varchar

item table
pkey: item id
fkey: brand id
item_name
price

brand table:
pkey: brand id
brand_name

cutomer table
pkey: customer
fkey: favorte store

let's say that many stores can carry many items
how do i manage this relationship?
make a new table that is an intermediary

carrying table
fkey (item id) integer
fkey (store id) integer

how do i find all items with brand name "abc"?
select * from (brand join items on brand.brandid = item.brandid) where brand.name = "abc";

how do i find the average price of all items?
select avg(price) from item

how do i find the average price of the items of each brand id?
select avg(price) from item group by brand id

how do i select the average price of items of each brand id, and together with brand_name in query?
SELECT AVG(i.price), b.name FROM item i JOIN brand b ON i.brand_id = b.id GROUP BY i.brand_id;

how do i get the count of how many items are carried by a store "xyz"?
select count(distinct(item id)) from (carrying join store on carrying.storeid = store.storeid) where store.name = "xyz"

select max(price) from item

how do we get the second max item?

select max(year_made)
	from
	(select year_made from
		painting except select max(year_made) as year_made from painting) as x;

IE: choose the maximum (which will be second maximum) from the set of results minus the maximum
